<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- The use of the "xml-config" profile here is for demonstration only. 
		A real application wouldn't normally need to switch between XML or Java Configuration. 
		You would use one, or other, or both, all the time. -->
	<beans profile="xml-config">
		<!-- Configure a classic SimpleMappingExceptionResolver. Try using the 
			ExampleSimpleMappingExceptionResolver and see the difference when
			/unhandledException is invoked.-->
		<bean id="simpleMappingExceptionResolver"
			class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
			<property name="exceptionMappings">
				<map>
					<entry key="DatabaseException" value="databaseError" />
					<entry key="InvalidCreditCardException" value="creditCardError" />
				</map>
			</property>
			<!-- Override name of exception attribute. Default is 'exception'. -->
			<property name="exceptionAttribute" value="ex" />

			<!-- Name of logger to use to log exceptions. Unset by default, so logging 
				disabled -->
			<property name="warnLogCategory" value="example.MvcLogger" />

			<!-- If using Spring Boot, this should be "error" (see Blog or details). 
				Here a different view is used deliberately to show when this handler is being 
				used vs when Spring Boot's error-page is being used. Leave this unset to
				fall back on Spring Boot's default error page. -->
			<property name="defaultErrorView" value="defaultErrorPage" />

		</bean>
	</beans>

</beans>
